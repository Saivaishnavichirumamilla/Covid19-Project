{
	"name": "DF_hospital_admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_hospital_admissions_raw",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "sourceLookupCountry"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date",
						"type": "DatasetReference"
					},
					"name": "dimDate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_daily_hospital_data_transformed",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_weekly_hsptl_transformed",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select2"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "pivot1"
				},
				{
					"name": "pivot2"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 1000,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceLookupCountry",
				"source(output(",
				"          date_key as date,",
				"          date as date,",
				"          year as string,",
				"          month as short,",
				"          day as short,",
				"          day_name as string,",
				"          day_of_year as short,",
				"          week_of_month as short,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as integer,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dimDate",
				"source1 select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, sourceLookupCountry lookup(select1@country == sourceLookupCountry@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          country = select1@country,",
				"          indicator,",
				"          reported_date,",
				"          year_week,",
				"          value,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          continent,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 split(startsWith(indicator,'Daily'),",
				"     disjoint: false) ~> split1@(DailyReport, WeeklyReport)",
				"dimDate derive(year_week = year+'-W'+lpad(week_of_year,2,'0')) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(year_week,",
				"          year),",
				"     {week-start-date} = min(date),",
				"          {week_end-date} = max(date)) ~> aggregate1",
				"split1@WeeklyReport, aggregate1 join(split1@WeeklyReport@year_week == aggregate1@year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"split1@DailyReport pivot(groupBy(country,",
				"          reported_date,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          continent),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count_ = count(value),",
				"     columnNaming: '$N$V',",
				"     lateral: false) ~> pivot1",
				"join1 pivot(groupBy(continent,",
				"          country,",
				"          country_code_3_digit,",
				"          split1@WeeklyReport@year_week,",
				"          {week-start-date},",
				"          {week_end-date},",
				"          population),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU hospital admissions per 100k']),",
				"     count_ = count(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivot2",
				"pivot1 select(mapColumn(",
				"          continent,",
				"          country,",
				"          reported_date,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          {count_Daily hospital occupancy},",
				"          {count_Daily ICU occupancy}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"pivot2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}